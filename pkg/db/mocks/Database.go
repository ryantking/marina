// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "upper.io/db.v3"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// ClearCache provides a mock function with given fields:
func (_m *Database) ClearCache() {
	_m.Called()
}

// Close provides a mock function with given fields:
func (_m *Database) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collection provides a mock function with given fields: _a0
func (_m *Database) Collection(_a0 string) db.Collection {
	ret := _m.Called(_a0)

	var r0 db.Collection
	if rf, ok := ret.Get(0).(func(string) db.Collection); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Collection)
		}
	}

	return r0
}

// Collections provides a mock function with given fields:
func (_m *Database) Collections() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnMaxLifetime provides a mock function with given fields:
func (_m *Database) ConnMaxLifetime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// ConnectionURL provides a mock function with given fields:
func (_m *Database) ConnectionURL() db.ConnectionURL {
	ret := _m.Called()

	var r0 db.ConnectionURL
	if rf, ok := ret.Get(0).(func() db.ConnectionURL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.ConnectionURL)
		}
	}

	return r0
}

// Driver provides a mock function with given fields:
func (_m *Database) Driver() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *Database) Logger() db.Logger {
	ret := _m.Called()

	var r0 db.Logger
	if rf, ok := ret.Get(0).(func() db.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Logger)
		}
	}

	return r0
}

// LoggingEnabled provides a mock function with given fields:
func (_m *Database) LoggingEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MaxIdleConns provides a mock function with given fields:
func (_m *Database) MaxIdleConns() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MaxOpenConns provides a mock function with given fields:
func (_m *Database) MaxOpenConns() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Database) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Open provides a mock function with given fields: _a0
func (_m *Database) Open(_a0 db.ConnectionURL) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.ConnectionURL) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *Database) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreparedStatementCacheEnabled provides a mock function with given fields:
func (_m *Database) PreparedStatementCacheEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetConnMaxLifetime provides a mock function with given fields: _a0
func (_m *Database) SetConnMaxLifetime(_a0 time.Duration) {
	_m.Called(_a0)
}

// SetLogger provides a mock function with given fields: _a0
func (_m *Database) SetLogger(_a0 db.Logger) {
	_m.Called(_a0)
}

// SetLogging provides a mock function with given fields: _a0
func (_m *Database) SetLogging(_a0 bool) {
	_m.Called(_a0)
}

// SetMaxIdleConns provides a mock function with given fields: _a0
func (_m *Database) SetMaxIdleConns(_a0 int) {
	_m.Called(_a0)
}

// SetMaxOpenConns provides a mock function with given fields: _a0
func (_m *Database) SetMaxOpenConns(_a0 int) {
	_m.Called(_a0)
}

// SetPreparedStatementCache provides a mock function with given fields: _a0
func (_m *Database) SetPreparedStatementCache(_a0 bool) {
	_m.Called(_a0)
}
